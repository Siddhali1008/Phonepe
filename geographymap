#To merge multiple json files and adding the count of similar entites for registered users

import os
import json

directory = 'C:/Users/siddhali_shah/Downloads/combinedstatedata'


state_data = {}


for filename in os.listdir(directory):
    if filename.endswith('.json'):
        # open and load JSON file
        with open(os.path.join(directory, filename)) as file:
            data = json.load(file)
        
        
        for state in data['data']['states']:
            state_name = state['name'].lower()
            registered_users = state['registeredUsers']
            
            
            if state_name in state_data:
                state_data[state_name] += registered_users
          
            else:
                state_data[state_name] = registered_users


output_states = []
for state, registered_users in state_data.items():
    output_states.append({'name': state, 'registeredUsers': registered_users})


output_data = {'success': True, 'code': 'SUCCESS', 'data': {'states': output_states, 'districts': []}}
with open('finaloutput.json', 'w') as file:
    json.dump(output_data, file, indent=4)
-------------------------------------------------------------------------------------------------------------------------------------------
# #To merge multiple json files and adding the count of similar entites for amount transferred

import json

q1_data = json.load(open('C:/Users/siddhali_shah/Downloads/combinedtransactiondata/aggregated.json'))
q2_data = json.load(open('C:/Users/siddhali_shah/Downloads/combinedtransactiondata/aggregated1.json'))
q3_data = json.load(open('C:/Users/siddhali_shah/Downloads/combinedtransactiondata/aggregated2.json'))
q4_data = json.load(open('C:/Users/siddhali_shah/Downloads/combinedtransactiondata/aggregated3.json'))
q5_data = json.load(open('C:/Users/siddhali_shah/Downloads/combinedtransactiondata/aggregated4.json'))


state_data = {}

for quarter_data in [q1_data, q2_data, q3_data, q4_data,q5_data]:
    for state in quarter_data['data']['states']:
        state_name = state['entityName']
        amount = state['metric']['amount']
        if state_name in state_data:
            state_data[state_name] += amount
        else:
            state_data[state_name] = amount


aggregated_data = {
    "success": True,
    "code": "SUCCESS",
    "data": {
        "states": [
            {
                "entityName": state_name,
                "metric": {
                    "type": "TOTAL",
                    "count": 0,  # Not used in the example data
                    "amount": amount
                }
            } for state_name, amount in state_data.items()
        ]
    }
}

with open('finalaggregated.json', 'w') as f:
    json.dump(aggregated_data, f)
    ----------------------------------------------------------------------------------------------------------------------------------------------------
    
    
#To plot a geography map

import json
import folium
from branca.colormap import LinearColormap


with open('india_state.geojson') as f:
    geojson_data = json.load(f)


with open('finaloutput.json') as f:
    state_data = json.load(f)['data']['states']


with open('finalaggregated.json') as f:
    aggregated_data = json.load(f)['data']['states']


state_dict = {state['name'].title(): state['registeredUsers'] for state in state_data}


aggregated_dict = {state['entityName'].title(): state['metric']['amount'] for state in aggregated_data}


for feature in geojson_data['features']:
    state_name = feature['properties']['NAME_1'].title()
    feature['properties']['registeredUsers'] = state_dict.get(state_name, 0)
    feature['properties']['amountTransferred'] = aggregated_dict.get(state_name, 0)
    
registered_users = [state_dict.get(feature['properties']['NAME_1'].title(), 0) for feature in geojson_data['features']]
color_map = LinearColormap(['green', 'yellow', 'red'], vmin=min(registered_users), vmax=max(registered_users))


m = folium.Map(location=[20.5937, 78.9629], zoom_start=4)


folium.GeoJson(
    geojson_data,
    name='choropleth',
    style_function=lambda x: {'fillColor': color_map(x['properties']['registeredUsers']), 'fillOpacity': 0.7, 'color': 'black', 'weight': 0.2},
    tooltip=folium.GeoJsonTooltip(
        fields=['NAME_1', 'registeredUsers', 'amountTransferred'],
        aliases=['State', 'Registered Users', 'Amount Transferred'],
        style=('background-color: grey; color: white; font-family: arial; font-size: 12px; padding: 10px;')
    ),
    highlight_function=lambda x: {'weight': 3, 'fillOpacity': 0.5},
).add_to(m)


folium.LayerControl().add_to(m)


m

